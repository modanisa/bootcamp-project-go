// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go

// Package mock_service is a generated GoMock package.
package mock

import (
	model "bootcamp/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIQuotesService is a mock of IQuotesService interface.
type MockIQuotesService struct {
	ctrl     *gomock.Controller
	recorder *MockIQuotesServiceMockRecorder
}

// MockIQuotesServiceMockRecorder is the mock recorder for MockIQuotesService.
type MockIQuotesServiceMockRecorder struct {
	mock *MockIQuotesService
}

// NewMockIQuotesService creates a new mock instance.
func NewMockIQuotesService(ctrl *gomock.Controller) *MockIQuotesService {
	mock := &MockIQuotesService{ctrl: ctrl}
	mock.recorder = &MockIQuotesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQuotesService) EXPECT() *MockIQuotesServiceMockRecorder {
	return m.recorder
}

// Quotes mocks base method.
func (m *MockIQuotesService) Quotes() (*model.QuotesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quotes")
	ret0, _ := ret[0].(*model.QuotesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Quotes indicates an expected call of Quotes.
func (mr *MockIQuotesServiceMockRecorder) Quotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quotes", reflect.TypeOf((*MockIQuotesService)(nil).Quotes))
}
