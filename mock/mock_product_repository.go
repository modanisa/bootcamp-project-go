// Code generated by MockGen. DO NOT EDIT.
// Source: repository/product_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	model "bootcamp/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIProductRepository is a mock of IProductRepository interface.
type MockIProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIProductRepositoryMockRecorder
}

// MockIProductRepositoryMockRecorder is the mock recorder for MockIProductRepository.
type MockIProductRepositoryMockRecorder struct {
	mock *MockIProductRepository
}

// NewMockIProductRepository creates a new mock instance.
func NewMockIProductRepository(ctrl *gomock.Controller) *MockIProductRepository {
	mock := &MockIProductRepository{ctrl: ctrl}
	mock.recorder = &MockIProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductRepository) EXPECT() *MockIProductRepositoryMockRecorder {
	return m.recorder
}

// FindAllProducts mocks base method.
func (m *MockIProductRepository) FindAllProducts() (model.ProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProducts")
	ret0, _ := ret[0].(model.ProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProducts indicates an expected call of FindAllProducts.
func (mr *MockIProductRepositoryMockRecorder) FindAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProducts", reflect.TypeOf((*MockIProductRepository)(nil).FindAllProducts))
}
